# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

rails_build: &rails_build
  resource_class: small
  parameters:
    web_awesome:
      description: "Testing against Web Awesome?"
      default: false
      type: boolean
  docker:
    - image: cimg/ruby:3.4-browsers
    - image: cimg/postgres:16.1
      environment:
        POSTGRES_DB: flip_on_the_awesome
        POSTGRES_PASSWORD: ''
        POSTGRES_USER: circleci-demo-ruby
  environment:
    WEB_AWESOME: "<< parameters.web_awesome >>"
    BUNDLE_JOBS: '3'
    BUNDLE_RETRY: '3'
    PGHOST: 127.0.0.1
    PGPASSWORD: ''
    PGUSER: circleci-demo-ruby
    RAILS_ENV: test
    PARALLEL_WORKERS: 3
    COVERAGE: 1
    HEADLESS_TESTS: true

orbs:
  bun: ksylvest/bun@1.0.1
  ruby: circleci/ruby@2.1.1

jobs:
  lint:
    resource_class: medium
    docker:
      - image: cimg/ruby:3.4
    steps:
      - checkout
      - ruby/install-deps
      - ruby/rubocop-check:
          format: progress
          label: Inspecting with Rubocop
          parallel: true
      - run: bundle exec bundler-audit --update
      - run: bundle exec brakeman -q -w2
  coverage:
    resource_class: small
    docker:
      - image: cimg/ruby:3.4
    environment:
      RAILS_ENV: test
    steps:
      - checkout
      - attach_workspace:
          at: .
      - ruby/install-deps
      - run:
          name: Merge and check coverage
          command: |
            bundle exec rake coverage:report
      - store_artifacts:
          path: coverage

      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - run:
          name: Format coverage results for CodeClimate
          command: |
            ./cc-test-reporter format-coverage -t simplecov -o tmp/codeclimate.json

      - run:
          name: Upload to CodeClimate
          command: |
            ./cc-test-reporter upload-coverage -i tmp/codeclimate.json

  test:
    <<: *rails_build
    steps:
      - checkout
      - ruby/install-deps
      - bun/install
      - run: bun install
      - run:
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
          name: Wait for DB
      - run:
          command: bundle exec rails db:schema:load --trace
          name: Database setup
      - run: bundle exec rails test
      - store_test_results:
          path: test/reports

      - store_artifacts:
          path: log/

      - store_artifacts:
          path: tmp/capybara/

      - run:
          name: Stash Coverage Results
          command: |
            mkdir coverage_results
            cp -R coverage/.resultset.json coverage_results/.resultset-${CIRCLE_JOB}-${CIRCLE_NODE_INDEX}.json
      - persist_to_workspace:
          root: .
          paths:
            - coverage_results

  test-system:
    <<: *rails_build
    resource_class: medium
    steps:
      - checkout
      - ruby/install-deps
      - bun/install
      - run: bun install
      - run:
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
          name: Wait for DB
      - run:
          command: bundle exec rails db:schema:load --trace
          name: Database setup
      - run: bundle exec rails test:system
      - store_test_results:
          path: test/reports

      - store_artifacts:
          path: log/

      - store_artifacts:
          path: tmp/capybara/

      - run:
          name: Stash Coverage Results
          command: |
            mkdir coverage_results
            cp -R coverage/.resultset.json coverage_results/.resultset-${CIRCLE_JOB}-${CIRCLE_NODE_INDEX}.json
      - persist_to_workspace:
          root: .
          paths:
            - coverage_results
workflows:
  build_and_test:
    jobs:
      - lint:
          context:
            - "My Context"
      - test:
          context:
            - "My Context"
      - test-system:
          context:
            - "My Context"
      - coverage:
          context:
            - "My Context"
          requires:
            - test
            - test-system

  webawesome_test:
    jobs:
      - test:
          name: "test-wa"
          web_awesome: true
          context:
            - "My Context"
      - test-system:
          name: "test-system-wa"
          web_awesome: true
          context:
            - "My Context"