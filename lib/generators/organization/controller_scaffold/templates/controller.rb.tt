# frozen_string_literal: true

class <%= controller_name %>Controller < Organizations::BaseController
  before_action :load_organization_<%= plural_name %>, only: %i(index)

  before_action :check_create_organization_<%= singular_name %>_authorization, only: %i(new create)

  before_action :load_organization_<%= singular_name %>, only: %i( show edit update )
  before_action :check_organization_<%= singular_name %>_authorization, only: %i( show edit update )

  breadcrumb :organization_<%= plural_name %>, :organization_<%= plural_name %>_path, match: :exact

  helper_method :main_application_navigation_link_key

  def index
  end

  def show
    breadcrumb(t('loaf.breadcrumbs.organization_<%= singular_name %>', <%= singular_name %>_name: @organization_<%= singular_name %>.name),
               organization_<%= singular_name %>_url(current_organization, @organization_<%= singular_name %>)
              )
  end

  def new
    breadcrumb :new_organization_<%= singular_name %>, new_organization_<%= singular_name %>_url
    @form = <%= form_class_name %>.new(
      current_organization: current_organization,
      current_user: current_user
    )
  end

  def edit
    breadcrumb(t('loaf.breadcrumbs.edit_organization_<%= singular_name %>', <%= singular_name %>_name: @organization_<%= singular_name %>.name),
               edit_organization_<%= singular_name %>_url(current_organization, @organization_<%= singular_name %>)
              )
    @form = <%= form_class_name %>.new(
      <%= singular_name %>: @organization_<%= singular_name %>,
      current_organization: current_organization,
      current_user: current_user
    )
  end

  def create
    @form = <%= form_class_name %>.new(organization_<%= singular_name %>_params)
    @form.save!

    flash[:success] = flash_success_with_icon(message: t('dispatcher.<%= plural_name %>.created_message'), icon: helpers.<%= singular_name %>_icon)

    organization_<%= singular_name %> = @form.<%= singular_name %>

    respond_to do |format|
      format.html { redirect_to organization_<%= singular_name %>_url(current_organization, organization_<%= singular_name %>) }
      format.json { json_redirect(location: organization_<%= singular_name %>_url(current_organization, organization_<%= singular_name %>))}
    end
  rescue ActiveRecord::RecordInvalid, ActiveModel::ValidationError
    default_respond_to_model_validation_error(html_action: :new, model: @form)
  end

  def update
    @form = <%= form_class_name %>.new(organization_<%= singular_name %>_params.merge(
      <%= singular_name %>: @organization_<%= singular_name %>
    ))
    @form.save!

    organization_<%= singular_name %> = @form.<%= singular_name %>

    updated_message = t('dispatcher.<%= plural_name %>.updated_message', <%= singular_name %>_name: organization_<%= singular_name %>.name)
    flash[:success] = flash_success_with_icon(message: updated_message, icon: helpers.<%= singular_name %>_icon)

    respond_to do |format|
      format.html { redirect_to organization_<%= singular_name %>_url(current_organization, organization_<%= singular_name %>) }
      format.json { json_redirect(location: organization_<%= singular_name %>_url(current_organization, organization_<%= singular_name %>))}
    end
  rescue ActiveRecord::RecordInvalid, ActiveModel::ValidationError
    default_respond_to_model_validation_error(html_action: :edit, model: @form)
  end

  def main_application_navigation_link_key
    case params[:action].to_sym
    when :show
      :organization_<%= singular_name %>
    else
      :organization_<%= plural_name %>
    end
  end

  private

  def check_create_organization_<%= singular_name %>_authorization
    authorize!(nil, to: :create?, with: <%= policy_class_name %>)
  end

  def check_organization_<%= singular_name %>_authorization
    authorize!(@organization_<%= singular_name %>, to: :manage?, with: <%= policy_class_name %>)
  end

  def load_organization_<%= plural_name %>
    @organization_<%= plural_name %> = scoped_relation
  end

  def load_organization_<%= singular_name %>
    @organization_<%= singular_name %> = authorized_scope(<%= name %>.all, with: <%= policy_class_name %>).find(params[:id])
  end

  def scoped_relation
    authorized_scope(<%= name %>.all, with: <%= policy_class_name %>)
  end

  # Only allow a list of trusted parameters through.
  def organization_<%= singular_name %>_params
    params.fetch(:organization_<%= singular_name %>).permit(
      :name
    ).merge(current_user: current_user, current_organization: current_organization)
  end
end
